plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
}

group = project.maven_group
version = project.mod_version

repositories {
    mavenCentral()
    flatDir {
        dirs "./libs"
    }
}

def urlFile = { url, name, version ->
    File file = new File("$rootDir/libs/${name}-${version}.jar")
    file.parentFile.mkdirs()
    if (!file.exists()) {
        new URL(url).withInputStream { downloadStream ->
            file.withOutputStream { fileOut -> fileOut << downloadStream
            }
        }
    }
    return [name: name, version: version]
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    modImplementation urlFile("https://github.com/cabaletta/baritone/releases/download/v${project.baritone_version}/baritone-api-fabric-${project.baritone_version}.jar", "baritone", "${project.minecraft_version}-${project.baritone_version}")

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 17
}

processResources {
    filteringCharset "UTF-8"
    filesMatching("fabric.mod.json") {
        filter { line -> line.replace("@mod_version@", project.mod_version) }
        filter { line -> line.replace("@minecraft_version@", project.minecraft_version) }
        filter { line -> line.replace("@fabric_loader_version@", project.fabric_loader_version) }
        filter { line -> line.replace("@fabric_api_version@", project.fabric_api_version) }
        filter { line -> line.replace("@baritone_version@", project.baritone_version) }
    }
}

remapJar {
    archiveFileName = "${project.mod_name}.jar"
}

test {
    useJUnitPlatform()
}
